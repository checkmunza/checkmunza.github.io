{"version":3,"sources":["components/my-timer/my-timer-view.js","components/my-timer/index.js","App.js","serviceWorker.js","index.js"],"names":["MyTimerView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","teamAmount","teamAmountDefault","onSubmitTeamAmount","bind","assertThisInitialized","amount","setState","event","preventDefault","milli","_this2","react_default","a","createElement","onSubmit","type","value","onChange","e","onChangeTeamAmount","parseInt","target","milliToSec","timeNow","toFixed","onClick","onClickTimerButton","disabled","isRunning","teamTime","length","Fragment","map","time","index","key","React","Component","MyTimer","timeLimit","undefined","currentTeam","handleTimerButton","handleSetTeamAmount","stopTimer","timerID","setInterval","updateTime","clearInterval","newTeamTime","slice","interval","startTimer","Array","fill","my_timer_view","App","my_timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.059902aa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MyTimerView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            teamAmount: props.teamAmountDefault,\r\n        }\r\n        this.onSubmitTeamAmount = this.onSubmitTeamAmount.bind(this);\r\n    }\r\n\r\n    onChangeTeamAmount(amount) {\r\n        this.setState({teamAmount: amount});\r\n    }\r\n\r\n    onSubmitTeamAmount(event) {\r\n        event.preventDefault();\r\n        this.props.onSubmitTeamAmount(this.state.teamAmount);\r\n    }\r\n\r\n    milliToSec(milli) {\r\n        return milli * 1.0 / 1000\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>My Timer</h1>\r\n                <form onSubmit={this.onSubmitTeamAmount}>\r\n                    <h3>Number of teams</h3>\r\n                    <input type=\"number\" value={this.state.teamAmount} onChange={e => this.onChangeTeamAmount(parseInt(e.target.value))}></input>\r\n                    <button type=\"submit\" value=\"Submit\">Submit</button>\r\n                </form>\r\n                <h1>{this.milliToSec(this.props.timeNow).toFixed(1)}</h1>\r\n                <button type=\"button\" \r\n                    onClick={this.props.onClickTimerButton}\r\n                    disabled={!this.props.teamAmount}\r\n                >\r\n                    {!this.props.isRunning ? \"Start\" : \"Stop\"}\r\n                </button>\r\n                { this.props.teamTime && this.props.teamTime.length > 0 &&\r\n                <>\r\n                    <h2>Team List:</h2>\r\n                    <ol>\r\n                        {this.props.teamTime.map( (time,index) => \r\n                            <li key={index}>{this.milliToSec(time).toFixed(1)} Seconds</li>\r\n                        )}\r\n                    </ol>\r\n                </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyTimerView;","import React from 'react';\r\nimport MyTimerView from './my-timer-view';\r\n\r\nclass MyTimer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.teamAmountDefault = 2;\r\n        this.timeLimit = 15000;\r\n        this.state = {\r\n            teamAmount: undefined,\r\n            teamTime: [],\r\n            isRunning: false,\r\n            timeNow: 0,\r\n            currentTeam: undefined,\r\n        }\r\n        \r\n        this.handleTimerButton = this.handleTimerButton.bind(this);\r\n        this.handleSetTeamAmount = this.handleSetTeamAmount.bind(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stopTimer();\r\n    }\r\n \r\n    startTimer() {\r\n        this.setState({timeNow: 0, isRunning: true});\r\n        this.timerID = setInterval(\r\n            () => this.updateTime(100),\r\n            100\r\n        );\r\n        \r\n    }\r\n\r\n    stopTimer() {\r\n        this.setState({isRunning: false});\r\n        if (this.timerID) {\r\n            clearInterval(this.timerID);\r\n        }\r\n        let newTeamTime = this.state.teamTime.slice();\r\n        newTeamTime[this.state.currentTeam] = newTeamTime[this.state.currentTeam] + this.state.timeNow;\r\n        this.setState((state, props) => {\r\n            return {\r\n                teamTime: newTeamTime,\r\n                currentTeam: (state.currentTeam + 1) % state.teamAmount,\r\n            }\r\n        });\r\n    }\r\n\r\n    updateTime(interval) {\r\n        this.setState((state, props) => {\r\n            return { timeNow: state.timeNow + interval }\r\n        });\r\n        if (this.state.timeNow >= this.timeLimit) {\r\n            this.stopTimer();\r\n        }\r\n    }\r\n\r\n    handleTimerButton() {\r\n        if (!this.state.isRunning) {\r\n            this.startTimer();\r\n        } else {\r\n            this.stopTimer();\r\n        }\r\n    }\r\n\r\n    handleSetTeamAmount(amount) {\r\n        this.setState({\r\n            teamAmount: amount,\r\n            currentTeam: 0,\r\n            teamTime: Array(amount).fill(0),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MyTimerView\r\n                isRunning={this.state.isRunning}\r\n                teamTime={this.state.teamTime}\r\n                timeNow={this.state.timeNow}\r\n                teamAmountDefault={this.teamAmountDefault}\r\n                teamAmount={this.state.teamAmount}\r\n                onClickTimerButton={this.handleTimerButton}\r\n                onSubmitTeamAmount={this.handleSetTeamAmount}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyTimer;\r\n","import React, { Component } from 'react';\n// import './App.css';\nimport MyTimer from './components/my-timer'\n\nclass App extends Component {\n  render() {\n    return (\n      <MyTimer />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}